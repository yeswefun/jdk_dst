package com.z.mk_sum;

/*
红黑树
    是一棵 二分搜索树
    防止退化成链表

2-3树
    不是一棵二叉树
    是一棵绝对平衡的树

    自己实现一个 2-3树


红黑树 和 2-3树 的等价性
    所有的红色节点都是左倾斜的 - 人为定义出来的

    2节点                 3节点
       a                 b,c
      /  \               / \

       a(black)            c(red)
      /  \                / \
                         b(black)
                        /  \

红黑树的 5条 性质
    1.每个节点或者是红色的，或者是黑色的

    2.根节点是黑色的
        根节点要么是 2节点，要么是 3节点

    3.每一个叶子节点(最后的空节点, 而不是二叉树中左右子树为空的节点)是黑色的
        空树也是红黑树
            根节点 == null，既是 根节点 又是 叶子节点
                节点颜色 为 黑色

    4.如果一个节点是红色的，那么他的孩子节点都是黑色的
        类似: 一个黑色的节点的右孩子一定是一个黑色的节点

    5.从任意一个节点到叶子节点，经过的黑色节点是一样的
        2-3树是一棵绝对平衡的树
            从任意一个节点出发到叶子节点所经过的节点数量是相等的
                在这些节点中第个节点都会出现黑色(有或没有红色节点)


红黑树添加新节点
    等价于 2-3树 一个 3节点 上融合 一个新元素


红黑树添加新元素的三种情况
    x0 -> x1x2 -> x0x1x2
    x2 -> x0x1 -> x0x1x2
    x1 -> x0x2 -> x0x1x2

红黑树
    相对于 avl 查询并不占优势
    rb 占优势 添加，删除

红黑树优化


TreeMap, TreeSet
    java, 底层 红黑树(二分搜索树,有序性)

13-1 红黑树与2-3树 (13:09)
13-2 2-3树的绝对平衡性 (19:03)
13-3 红黑树与2-3树的等价性 (19:40)
13-4 红黑树的基本性质和复杂度分析 (19:13)
13-5 保持根节点为黑色和左旋转 (19:17)
13-6 颜色翻转和右旋转 (15:43)
13-7 红黑树中添加新元素 (14:56)
13-8 红黑树的性能测试 (15:21)
13-9 更多和红黑树相关的话题 (09:30)
13-10 对于红黑树，任何不平衡都会在三次旋转内解决？
    图文
 */
interface Z130_RB {
}
