package com.z.mk_sum;

/*
Set: 集合

    不能添加重复元素

    二叉搜索树不能放重复元素
        作为Set的底层实现

典型应用:
    客户统计
    词汇量统计


Map底层实现
    链表
        Node {
            E elem;
            Node next;
        }
    二叉搜索树
        Node {
            E elem;
            Node left;
            Node right;
        }

同样的数据，可以对应不同的二分搜索树
            4
        2       5
     1      3       6

     1
        2
            3
                4
                    5
                        6

有序集合和无序集合
    有序集合中的元素具有顺序性(基于 搜索树 的实现)

    无序集合中的元素没有顺序性(基于 哈希表 的实现)
       无序集合也可以使用 链表 作为底层, 但是 效率低


多重集合
    集合中的元素可以重复


Set的时间复杂度分析


二分搜索树, 假设 树的高度为 h

    0层: 1   == 2^0
    1层: 2   == 2^1
    2层: 4   == 2^2
    3层: 8
    4层: 16
    ...
    (h-1)层: cnt == 2^(h-1)

    1层: 1   == 2^0  == 2^(1-1)
    2层: 2   == 2^1  == 2^(2-1)
    3层: 4   == 2^2  == 2^(3-1)
    4层: 8   == 2^3  == 2^(4-1)
    ...
    h层: cnt == 2^(h-1)

    h层一共有多少个节点
        2^0 + 2^1 + 2^2 + 2^3 + ... + 2^(h-1)
        等比数列求和: 错位相减
        1) S   = 2^0 + 2^1 + 2^2 + 2^3 + ... + 2^(h-1)
        2) 2*S =       2^1 + 2^2 + 2^3 + ... + 2^(h-1) + 2^h
        由 1) - 2) 得
        -S = 2^0 - 2^h
         S = 2^h - 1
 */
interface Z40_Set {
}
